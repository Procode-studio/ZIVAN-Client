import React, { useState, useEffect, useRef } from 'react';
import Avatar from './Avatar.jsx';
import './CallUI.css';

function CallUI({ stream, peerStream, onLeaveCall, peerName, onMinimize, isCalling }) {
  const [isMicOn, setIsMicOn] = useState(true);
  const [isCameraOn, setIsCameraOn] = useState(false); // –ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∞
  const [callDuration, setCallDuration] = useState(0);
  const myVideo = useRef();
  const userVideo = useRef();

  // --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
  useEffect(() => {
    if (stream && myVideo.current) {
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç—É
      myVideo.current.srcObject = stream;
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–∂–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      stream.getVideoTracks().forEach(track => {
        track.enabled = isCameraOn;
      });
    }
  // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è isCameraOn
  }, [stream, isCameraOn]);

  useEffect(() => {
    if (peerStream && userVideo.current) {
      userVideo.current.srcObject = peerStream;
    }
  }, [peerStream]);
  
  useEffect(() => {
    if (!isCalling) {
      const timer = setInterval(() => setCallDuration(prev => prev + 1), 1000);
      return () => clearInterval(timer);
    }
  }, [isCalling]);

  const formatDuration = (seconds) => new Date(seconds * 1000).toISOString().substr(14, 5);

  const toggleMic = () => {
    if (stream) {
      stream.getAudioTracks().forEach(track => {
        track.enabled = !track.enabled;
      });
      setIsMicOn(prev => !prev);
    }
  };

  const toggleCamera = () => {
    // –ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ. useEffect —Å–¥–µ–ª–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ.
    setIsCameraOn(prev => !prev);
  };

  return (
    <div className="call-overlay">
      <div className="call-info">
        <h2>{peerName}</h2>
        <p>{isCalling ? '–í—ã–∑–æ–≤...' : formatDuration(callDuration)}</p>
      </div>

      <div className="call-videos">
        {peerStream ? (
          <video className="user-video" playsInline ref={userVideo} autoPlay />
        ) : (
          <div className="user-avatar-large">
            <Avatar username={peerName} size={150} />
          </div>
        )}
        
        <div className="my-video-container">
          {/* –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –±–ª–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä */}
          <video 
            className="my-video" 
            style={{ display: isCameraOn ? 'block' : 'none' }} 
            playsInline 
            muted 
            ref={myVideo} 
            autoPlay 
          />
          {!isCameraOn && (
            <div className="my-video">
              <Avatar username="You" size={100} />
            </div>
          )}
        </div>
      </div>

      <div className="call-controls">
        <button className="control-btn" onClick={onMinimize}>‚¨áÔ∏è</button>
        <button className="control-btn" onClick={toggleMic}>{isMicOn ? 'üé§' : 'üîá'}</button>
        <button className="control-btn" onClick={toggleCamera}>{isCameraOn ? 'üìπ' : 'üì∏'}</button>
        <button className="control-btn hang-up" onClick={onLeaveCall}>üìû</button>
      </div>
    </div>
  );
}

export default CallUI;