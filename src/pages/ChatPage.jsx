import React, { useState, useEffect, useCallback, useRef } from 'react';
import Peer from 'simple-peer';
import { getChats, getMessages } from '../api/chatApi';
import { useSocket } from '../hooks/useSocket';
import CreateChatModal from '../components/CreateChatModal.jsx';
import CallUI from '../components/CallUI.jsx';
import './ChatPage.css';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STUN/TURN —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
const peerConfig = {
  iceServers: [
    {
      urls: [
        "stun:stun.openrelay.metered.ca:80",
        "turn:openrelay.metered.ca:80",
        "turn:openrelay.metered.ca:443",
        "turn:openrelay.metered.ca:443?transport=tcp"
      ],
      username: "openrelayproject",
      credential: "openrelayproject"
    }
  ]
};

function ChatPage({ userId }) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
  const [stream, setStream] = useState(null);
  const [peerStream, setPeerStream] = useState(null);
  const [receivingCall, setReceivingCall] = useState(false);
  const [callerInfo, setCallerInfo] = useState({ from: null, signal: null, fromName: '' });
  const [callAccepted, setCallAccepted] = useState(false);
  const [isCalling, setIsCalling] = useState(false);
  
  // Refs –¥–ª—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const connectionRef = useRef();
  const messagesEndRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ–∫–µ—Ç–∞
  const handleNewMessage = useCallback((message) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
    if (selectedChat && message.chat_id === selectedChat.id) {
      setMessages((prevMessages) => [...prevMessages, message]);
    }
  }, [selectedChat]);

  const { joinRoom, sendMessage, socket } = useSocket(import.meta.env.VITE_API_URL, handleNewMessage);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  useEffect(() => {
    if (socket) {
      socket.on("hey", (data) => {
        const chatWithCaller = chats.find(chat => chat.members.some(m => m.id === data.from));
        const callerName = chatWithCaller?.members.find(m => m.id === data.from)?.username || 'Unknown Caller';
        setCallerInfo({ from: data.from, signal: data.signal, fromName: callerName });
        setReceivingCall(true);
      });
      socket.on("callAccepted", (signal) => {
        setIsCalling(false);
        setCallAccepted(true);
        if (connectionRef.current) {
          connectionRef.current.signal(signal);
        }
      });
      socket.on("callEnded", leaveCall); // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    }
    return () => {
      if (socket) {
        socket.off("hey");
        socket.off("callAccepted");
        socket.off("callEnded");
      }
    };
  }, [socket, chats]); // –î–æ–±–∞–≤–ª—è–µ–º chats –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã callerName –±—ã–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º

  // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –∏ –∞–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  useEffect(() => { getChats().then(setChats); }, []);
  useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
  const handleSelectChat = async (chat) => {
    setSelectedChat(chat);
    setMessages([]);
    const chatMessages = await getMessages(chat.id);
    setMessages(chatMessages);
    joinRoom(chat.id);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = (e) => {
    e.preventDefault();
    if (newMessage.trim() && selectedChat) {
      sendMessage({ chatId: selectedChat.id, content: newMessage });
      setNewMessage('');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É
  const startStream = async (cameraOn = false) => {
    try {
      const currentStream = await navigator.mediaDevices.getUserMedia({ video: cameraOn, audio: true });
      setStream(currentStream);
      return currentStream;
    } catch (err) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏–ª–∏ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.");
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  const callUser = async (idToCall) => {
    const currentStream = await startStream(false); // –ö–∞–º–µ—Ä–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞
    if (!currentStream) return;
    setIsCalling(true);
    
    const peer = new Peer({ initiator: true, trickle: false, stream: currentStream, config: peerConfig });
    connectionRef.current = peer;

    peer.on("signal", (data) => socket.emit("callUser", { userToCall: idToCall, signalData: data, from: userId }));
    peer.on("stream", (stream) => setPeerStream(stream));
    peer.on("close", leaveCall);
    peer.on("error", leaveCall);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
  const answerCall = async () => {
    setReceivingCall(false);
    const currentStream = await startStream(false); // –ö–∞–º–µ—Ä–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞
    if (!currentStream) return;
    setCallAccepted(true);

    const peer = new Peer({ initiator: false, trickle: false, stream: currentStream, config: peerConfig });
    connectionRef.current = peer;

    peer.on("signal", (data) => socket.emit("acceptCall", { signal: data, to: callerInfo.from }));
    peer.on("stream", (stream) => setPeerStream(stream));
    peer.on("close", leaveCall);
    peer.on("error", leaveCall);
    peer.signal(callerInfo.signal);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  const leaveCall = () => {
    if (connectionRef.current) {
      const otherUserInCall = selectedChat?.members.find(m => m.id !== userId) || { id: callerInfo.from };
      if (otherUserInCall.id) {
        socket.emit("endCall", { to: otherUserInCall.id });
      }
      connectionRef.current.destroy();
    }
    if (stream) stream.getTracks().forEach(track => track.stop());
    setStream(null);
    setPeerStream(null);
    setCallAccepted(false);
    setIsCalling(false);
    setReceivingCall(false);
  };

  const otherUser = selectedChat?.members.find(m => m.id !== userId);

  return (
    <div>
      {callAccepted && (
        <CallUI stream={stream} peerStream={peerStream} onLeaveCall={leaveCall} peerName={otherUser?.username || callerInfo.fromName} />
      )}
      
      <h1>ZIVAN <button onClick={() => { localStorage.removeItem('token'); window.location.href = '/login'; }}>–í—ã–π—Ç–∏</button></h1>
      <button onClick={() => setIsModalOpen(true)}>+ –ù–æ–≤—ã–π —á–∞—Ç</button>
      {isModalOpen && <CreateChatModal onClose={() => setIsModalOpen(false)} onChatCreated={() => getChats().then(setChats)} />}
      
      <div className="chat-container">
        <div className="chat-list">
          {chats.map(chat => (
            <div key={chat.id} className={`chat-item ${selectedChat?.id === chat.id ? 'selected' : ''}`} onClick={() => handleSelectChat(chat)}>
              <h3>{chat.name || chat.members.find(m => m.id !== userId)?.username || '–ß–∞—Ç'}</h3>
            </div>
          ))}
        </div>
        <div className="message-view">
          {selectedChat ? (
            <>
              <div className="chat-header">
                <h2>{selectedChat.name || otherUser?.username || '–ß–∞—Ç'}</h2>
                {selectedChat.type === 'private' && otherUser && !isCalling && !callAccepted && !receivingCall && (
                  <button onClick={() => callUser(otherUser.id)}>üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
                )}
                {isCalling && <p><i>–í—ã–∑–æ–≤...</i></p>}
              </div>
              <div className="messages-list">
                {messages.map(msg => {
                  const isOwnMessage = msg.sender_id === userId;
                  return (
                    <div key={msg.id} className={`message-row ${isOwnMessage ? 'own' : 'other'}`}>
                      <div className="message"><p>{msg.content}</p><small>{new Date(msg.timestamp).toLocaleTimeString()}</small></div>
                    </div>
                  );
                })}
                <div ref={messagesEndRef} />
              </div>
              <form onSubmit={handleSendMessage}>
                <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." value={newMessage} onChange={(e) => setNewMessage(e.target.value)} />
                <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
              </form>
            </>
          ) : (
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
          )}
        </div>
      </div>

      {receivingCall && !callAccepted && (
        <div className="caller-notification">
          <h1>–í–∞–º –∑–≤–æ–Ω–∏—Ç {callerInfo.fromName}</h1>
          <button onClick={answerCall}>‚úÖ</button>
          <button onClick={() => setReceivingCall(false)}>‚ùå</button>
        </div>
      )}
    </div>
  );
}

export default ChatPage;